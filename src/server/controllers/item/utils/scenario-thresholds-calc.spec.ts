import { scenarioThresholdsCalc } from "./scenario-thresholds-calc"
import { LabelStats } from "../../../data-stats/prepare-data"

describe("scenarioThresholdsCalc", () => {
    const BASELINE_REPORT_STATS: LabelStats[] = [{
        label: "label1",
        n0: 70,
        n5: 100,
        n9: 100,
        samples: 100,
        latency: 2,
        connect: 4,
        standardDeviation: 3.3,
        bytesPerSecond: 100,
        bytesSentPerSecond: 100,
        statusCodes: [{ statusCode: "200", count: 100 }],
        throughput: 200,
        errorRate: 0.0,
        avgResponseTime: 100,
        minResponseTime: 1,
        maxResponseTime: 100,
        medianResponseTime: 40,
        responseMessageFailures: null,
        apdex: {},
    }, {
        label: "label2",
        n0: 30,
        n5: 100,
        n9: 88,
        samples: 100,
        latency: 2,
        connect: 4,
        standardDeviation: 3.3,
        bytesPerSecond: 100,
        bytesSentPerSecond: 100,
        statusCodes: [{ statusCode: "200", count: 100 }],
        throughput: 200,
        errorRate: 10.0,
        avgResponseTime: 100,
        minResponseTime: 1,
        maxResponseTime: 100,
        medianResponseTime: 40,
        responseMessageFailures: null,
        apdex: {},
    }, {
        label: "label3",
        n0: 100,
        n5: 100,
        n9: 88,
        samples: 100,
        latency: 2,
        connect: 4,
        standardDeviation: 3.3,
        bytesPerSecond: 100,
        bytesSentPerSecond: 100,
        statusCodes: [{ statusCode: "200", count: 100 }],
        throughput: 100,
        errorRate: 0.0,
        avgResponseTime: 100,
        minResponseTime: 1,
        maxResponseTime: 100,
        medianResponseTime: 40,
        responseMessageFailures: null,
        apdex: {},
    },
    ]
    it("should return correct values for thresholds", () => {
        const labelData: LabelStats[] = [{
            label: "label1",
            n0: 100,
            n5: 100,
            n9: 100,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 100,
            errorRate: 10.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }, {
            label: "label2",
            n0: 100,
            n5: 100,
            n9: 88,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 88,
            errorRate: 5.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }, {
            label: "label3",
            n0: 95,
            n5: 100,
            n9: 88,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 100,
            errorRate: 0.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }]
        const output = scenarioThresholdsCalc(labelData, BASELINE_REPORT_STATS, {
            errorRate: "5", percentile: "5", throughput: "5",
        })
        expect(output.passed).toBe(false)
        expect(output.results).toEqual([{
            label: "label1", passed: false, result: {
                errorRate: { passed: false, diffValue: 110 },
                percentile: { passed: false, diffValue: 142.85714285714286 },
                throughput: { passed: false, diffValue: 50 },
            },
        }, {
            label: "label2", passed: false, result: {
                errorRate: { passed: true, diffValue: 50 },
                percentile: { passed: false, diffValue: 333.33333333333337 },
                throughput: { passed: false, diffValue: 44 },
            },
        }, {
            label: "label3", passed: true, result: {
                errorRate: { passed: true, diffValue: 100 },
                percentile: { passed: true, diffValue: 95 },
                throughput: { passed: true, diffValue: 100 },
            },
        },
        ])
    })
    it("should return undefined when no scenario settings provided", function () {
        const labelData: LabelStats[] = [{
            label: "label1",
            n0: 100,
            n5: 100,
            n9: 100,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 100,
            errorRate: 10.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }, {
            label: "label2",
            n0: 100,
            n5: 100,
            n9: 88,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 88,
            errorRate: 0.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }]
        const output = scenarioThresholdsCalc(labelData, BASELINE_REPORT_STATS, {})
        expect(output).not.toBeDefined()
    })
    it("should return default values when label not found it baseline report", function () {
        const labelData: LabelStats[] = [{
            label: "labelNotFound",
            n0: 100,
            n5: 100,
            n9: 100,
            samples: 100,
            latency: 2,
            connect: 4,
            standardDeviation: 3.3,
            bytesPerSecond: 100,
            bytesSentPerSecond: 100,
            statusCodes: [{ statusCode: "200", count: 100 }],
            throughput: 100,
            errorRate: 10.0,
            avgResponseTime: 100,
            minResponseTime: 1,
            maxResponseTime: 100,
            medianResponseTime: 40,
            responseMessageFailures: null,
            apdex: {},
        }]
        const output = scenarioThresholdsCalc(labelData, BASELINE_REPORT_STATS, {
            errorRate: "5", percentile: "5", throughput: "5",
        })
        expect(output).toEqual({
                passed: true,
                results: [{
                    label: "labelNotFound", passed: true, result: {
                        errorRate: { diffValue: null, passed: null },
                        percentile: { diffValue: null, passed: null },
                        throughput: { diffValue: null, passed: null },
                    },
                }],
                thresholds: { errorRate: "5", percentile: "5", throughput: "5" },
            }
        )

    })
})
